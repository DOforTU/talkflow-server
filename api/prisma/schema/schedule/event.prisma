model Event{
  // Primary Key
  id          Int       @id @default(autoincrement()) @db.Integer

  // Event Information
  title       String    @db.VarChar
  description String?   @db.VarChar
  startTime   String    @db.VarChar(16) // "2025-09-01 19:30" 형식
  endTime     String    @db.VarChar(16) // "2025-09-01 21:00" 형식
  isAllDay    Boolean   @default(false)
  colorCode   String    @db.VarChar(7)
  version     Int       @default(1)

  // Relations 
  userId            Int
  user              User   @relation(fields: [userId], references: [id])
  recurringEventId  Int?
  recurringEvent    RecurringEvent? @relation(fields: [recurringEventId], references: [id])
  locationId        Int?
  location          Location? @relation(fields: [locationId], references: [id])

  // Timestamps (Common fields)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)



  @@map("event")
}

model RecurringEvent{
  // Primary Key
  id          Int       @id @default(autoincrement()) @db.Integer

  // Recurring Event Information
  rule        String    @db.VarChar(255)
  startDate   String    @db.VarChar(10) // "2025-09-01" 형식
  endDate     String?   @db.VarChar(10) // "2025-09-30" 형식
  title       String    @db.VarChar
  description String?   @db.VarChar
  colorCode   String    @db.VarChar(7)
  version     Int       @default(1)

  // Relation
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  locationId  Int?
  location    Location? @relation(fields: [locationId], references: [id])
  events      Event[]

  // Timestamps (Common fields)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)

  @@map("recurring_event")
}