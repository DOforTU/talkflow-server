// ===== GENERATOR & DATASOURCE =====

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== ENUMS =====

enum user_role_enum {
  user
  admin
  super_admin
}

enum user_provider_enum {
  local
  google
}

enum profile_language_enum {
  ko
  en
}

enum content_enum {
  image
  video
}

// ===== MODELS =====

model User {
  // Primary Key
  id  Int                       @id @default(autoincrement()) @db.Integer

  // User Information
  email     String              @unique @db.VarChar
  password  String?             @db.VarChar
  firstName String              @db.VarChar
  lastName  String              @db.VarChar
  oauthId   String?             @db.VarChar
  
  // User Settings
  role      user_role_enum      @default(user)
  provider  user_provider_enum  @default(local)
  lastLogin DateTime?           @db.Timestamp(6)
  silhouettes  Silhouette[]
  
  // Timestamps (Common fields)
  createdAt DateTime            @default(now()) @db.Timestamp(6)
  updatedAt DateTime            @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime?           @db.Timestamp(6)

  // Relations
  profile   Profile?            

  @@map("user")
}

model Profile {
  // Primary Key
  id        Int                     @id @default(autoincrement()) @db.Integer

  // Profile Information
  nickname  String                  @unique @db.VarChar
  avatarUrl String                  @db.VarChar
  bio       String?
  language  profile_language_enum?

  // Timestamps (Common fields)
  createdAt DateTime                @default(now()) @db.Timestamp(6)
  updatedAt DateTime                @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt DateTime?               @db.Timestamp(6)

  // Relations
  userId    Int?                    @unique @db.Integer
  user      User?                   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("profile")
}

model PendingUser {
  // Primary Key
  id               Int      @id @default(autoincrement()) @db.Integer
  
  // User Information
  email            String   @unique @db.VarChar
  password         String   @db.VarChar
  firstName        String   @db.VarChar
  lastName         String   @db.VarChar
  
  // Verification
  verificationCode String   @db.VarChar
  codeExpiresAt    DateTime @db.Timestamp(6)

  // Timestamps
  createdAt        DateTime @default(now()) @db.Timestamp(6)

  @@map("pending_user")
}

model Silhouette {
  // Primary Key
  id          Int       @id @default(autoincrement()) @db.Integer

  // Silhouette Information
  contentUrl       String    @db.VarChar
  type    content_enum?
  runningTime Float  @db.DoublePrecision() @default(15.0)

  userId Int
  user   User   @relation(fields: [userId], references: [id])

  // Timestamps (Common fields)
  createdAt   DateTime  @default(now()) @db.Timestamp(6)
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamp(6)
  deletedAt   DateTime? @db.Timestamp(6)

  @@map("silhouette")
}
